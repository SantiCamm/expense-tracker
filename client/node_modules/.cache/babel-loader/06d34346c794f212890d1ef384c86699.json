{"ast":null,"code":"import _asyncToGenerator from\"/home/santiago/React/expense-tracker/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/santiago/React/expense-tracker/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/santiago/React/expense-tracker/client/node_modules/@babel/runtime/regenerator/index.js\";import React,{createContext,useReducer}from\"react\";import AppReducer from\"./AppReducer\";import axios from\"axios\";// Default state\nimport{jsx as _jsx}from\"react/jsx-runtime\";var initialState={transactions:[],error:null,isLoading:true};// Create context\nexport var GlobalContext=/*#__PURE__*/createContext(initialState);// Create provider for other components to access state, actions, etc\n// Children will be the components wrapped inside the GlobalProvider\nexport var GlobalProvider=function GlobalProvider(_ref){var children=_ref.children;// Reducer takes our own reducer and an initial piece of state\nvar _useReducer=useReducer(AppReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// ACTIONS\n// Async since we are waiting for the api response\nfunction getTransactions(){return _getTransactions.apply(this,arguments);}function _getTransactions(){_getTransactions=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"/expensetracker/transactions/\");case 3:res=_context.sent;// Dispatch an action to the reducer with the fetched data\ndispatch({type:\"GET_TRANSACTIONS\",payload:res.data.data});_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);dispatch({type:\"TRANSACTION_ERROR\",payload:_context.t0.response.data.error});case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return _getTransactions.apply(this,arguments);}function addTransaction(_x){return _addTransaction.apply(this,arguments);}function _addTransaction(){_addTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(transaction){var config,res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;// Config to make a POST request with axios (headers)\nconfig={headers:{\"Content-Type\":\"application/json\"}};// Axios request\n_context2.next=4;return axios.post(\"expensetracker/transactions/\",transaction,config);case 4:res=_context2.sent;// Dispatch an action with the response data. In this case, the recently added transaction\ndispatch({type:\"ADD_TRANSACTION\",payload:res.data.data});_context2.next=11;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);dispatch({type:\"TRANSACTION_ERROR\",payload:_context2.t0.response.data.message});case 11:case\"end\":return _context2.stop();}}},_callee2,null,[[0,8]]);}));return _addTransaction.apply(this,arguments);}function deleteTransaction(_x2){return _deleteTransaction.apply(this,arguments);}// Return the Provider so that we can access it\nfunction _deleteTransaction(){_deleteTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return axios.delete(\"expensetracker/transactions/\".concat(id));case 3:dispatch({type:\"DELETE_TRANSACTION\",payload:id});_context3.next=9;break;case 6:_context3.prev=6;_context3.t0=_context3[\"catch\"](0);dispatch({type:\"TRANSACTION_ERROR\",payload:_context3.t0.response.data.error});case 9:case\"end\":return _context3.stop();}}},_callee3,null,[[0,6]]);}));return _deleteTransaction.apply(this,arguments);}return/*#__PURE__*/_jsx(GlobalContext.Provider,{value:{transactions:state.transactions,error:state.error,isLoading:state.isLoading,getTransactions:getTransactions,deleteTransaction:deleteTransaction,addTransaction:addTransaction},children:children});};","map":{"version":3,"sources":["/home/santiago/React/expense-tracker/client/src/context/GlobalState.jsx"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","transactions","error","isLoading","GlobalContext","GlobalProvider","children","state","dispatch","getTransactions","get","res","type","payload","data","response","addTransaction","transaction","config","headers","post","message","deleteTransaction","id","delete"],"mappings":"sYAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,KAAiD,OAAjD,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA;2CACA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,YAAY,CAAE,EADK,CAEnBC,KAAK,CAAE,IAFY,CAGnBC,SAAS,CAAE,IAHQ,CAArB,CAMA;AACA,MAAO,IAAMC,CAAAA,aAAa,cAAGR,aAAa,CAACI,YAAD,CAAnC,CAEP;AACA;AACA,MAAO,IAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAE9C;AACA,gBAA0BT,UAAU,CAACC,UAAD,CAAaE,YAAb,CAApC,4CAAOO,KAAP,iBAAcC,QAAd,iBAEA;AACA;AAN8C,QAO/BC,CAAAA,eAP+B,uJAO9C,iLAIsBV,CAAAA,KAAK,CAACW,GAAN,CAAU,+BAAV,CAJtB,QAIUC,GAJV,eAMI;AACAH,QAAQ,CAAC,CACPI,IAAI,CAAE,kBADC,CAEPC,OAAO,CAAEF,GAAG,CAACG,IAAJ,CAASA,IAFX,CAAD,CAAR,CAPJ,+EAYIN,QAAQ,CAAC,CACPI,IAAI,CAAE,mBADC,CAEPC,OAAO,CAAE,YAAME,QAAN,CAAeD,IAAf,CAAoBZ,KAFtB,CAAD,CAAR,CAZJ,oEAP8C,0DA0B/Bc,CAAAA,cA1B+B,sJA0B9C,kBAA8BC,WAA9B,sJAGI;AACMC,MAJV,CAImB,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAJnB,CAUI;AAVJ,uBAWsBpB,CAAAA,KAAK,CAACqB,IAAN,CAChB,8BADgB,CAEhBH,WAFgB,CAGhBC,MAHgB,CAXtB,QAWUP,GAXV,gBAiBI;AACAH,QAAQ,CAAC,CACPI,IAAI,CAAE,iBADC,CAEPC,OAAO,CAAEF,GAAG,CAACG,IAAJ,CAASA,IAFX,CAAD,CAAR,CAlBJ,mFAuBIN,QAAQ,CAAC,CACPI,IAAI,CAAE,mBADC,CAEPC,OAAO,CAAE,aAAME,QAAN,CAAeD,IAAf,CAAoBO,OAFtB,CAAD,CAAR,CAvBJ,sEA1B8C,yDAwD/BC,CAAAA,iBAxD+B,uDAuE9C;AAvE8C,yGAwD9C,kBAAiCC,EAAjC,8JAEUxB,CAAAA,KAAK,CAACyB,MAAN,uCAA4CD,EAA5C,EAFV,QAGIf,QAAQ,CAAC,CACPI,IAAI,CAAE,oBADC,CAEPC,OAAO,CAAEU,EAFF,CAAD,CAAR,CAHJ,kFAQIf,QAAQ,CAAC,CACPI,IAAI,CAAE,mBADC,CAEPC,OAAO,CAAE,aAAME,QAAN,CAAeD,IAAf,CAAoBZ,KAFtB,CAAD,CAAR,CARJ,qEAxD8C,oDAwE9C,mBACE,KAAC,aAAD,CAAe,QAAf,EACE,KAAK,CAAE,CACLD,YAAY,CAAEM,KAAK,CAACN,YADf,CAELC,KAAK,CAAEK,KAAK,CAACL,KAFR,CAGLC,SAAS,CAAEI,KAAK,CAACJ,SAHZ,CAILM,eAAe,CAAfA,eAJK,CAKLa,iBAAiB,CAAjBA,iBALK,CAMLN,cAAc,CAAdA,cANK,CADT,UAUGV,QAVH,EADF,CAcD,CAtFM","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\n// Default state\nconst initialState = {\n  transactions: [],\n  error: null,\n  isLoading: true,\n};\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Create provider for other components to access state, actions, etc\n// Children will be the components wrapped inside the GlobalProvider\nexport const GlobalProvider = ({ children }) => {\n\n  // Reducer takes our own reducer and an initial piece of state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // ACTIONS\n  // Async since we are waiting for the api response\n  async function getTransactions() {\n    try {\n      \n      // Make the api call with axios\n      const res = await axios.get(\"/expensetracker/transactions/\");\n\n      // Dispatch an action to the reducer with the fetched data\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: res.data.data,\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.error,\n      });\n    }\n  }\n\n  async function addTransaction(transaction) {\n    try {\n\n      // Config to make a POST request with axios (headers)\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      // Axios request\n      const res = await axios.post(\n        \"expensetracker/transactions/\",\n        transaction,\n        config\n      );\n\n      // Dispatch an action with the response data. In this case, the recently added transaction\n      dispatch({\n        type: \"ADD_TRANSACTION\",\n        payload: res.data.data,\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.message,\n      });\n    }\n  }\n\n  async function deleteTransaction(id) {\n    try {\n      await axios.delete(`expensetracker/transactions/${id}`);\n      dispatch({\n        type: \"DELETE_TRANSACTION\",\n        payload: id,\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.error,\n      });\n    }\n  }\n\n  // Return the Provider so that we can access it\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        error: state.error,\n        isLoading: state.isLoading,\n        getTransactions,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}