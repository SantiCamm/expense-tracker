{"ast":null,"code":"var _jsxFileName = \"/home/santiago/React/expense-tracker/client/src/context/GlobalState.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: [],\n  error: null,\n  isLoading: true\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Create provider for other components to access state, actions, etc\n\nexport const GlobalProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // Reducer takes our own reducer and an initial piece of state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  async function getTransactions() {\n    try {\n      const res = await axios.get(\"/expensetracker/transactions/\");\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: res.data.data\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.error\n      });\n    }\n  }\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction\n    });\n  } // Return the Provider so that we can access it\n  // {children} will be our components wrapped inside the Provider. In this case, everything in App.js\n\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/home/santiago/React/expense-tracker/client/src/context/GlobalState.jsx"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","transactions","error","isLoading","GlobalContext","GlobalProvider","children","state","dispatch","getTransactions","res","get","type","payload","data","response","deleteTransaction","id","addTransaction","transaction"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,SAAS,EAAE;AAHQ,CAArB,C,CAMA;;AACA,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMK,cAAc,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC9C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACC,UAAD,EAAaE,YAAb,CAApC;;AAEA,iBAAeS,eAAf,GAAiC;AAC/B,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,+BAAV,CAAlB;AACAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE,kBADC;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA;AAFX,OAAD,CAAR;AAID,KAND,CAME,OAAOZ,KAAP,EAAc;AACdM,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE,mBADC;AAEPC,QAAAA,OAAO,EAAEX,KAAK,CAACa,QAAN,CAAeD,IAAf,CAAoBZ;AAFtB,OAAD,CAAR;AAID;AACF;;AAED,WAASc,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7BT,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID;;AAED,WAASC,cAAT,CAAwBC,WAAxB,EAAqC;AACnCX,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAID,GA/B6C,CAiC9C;AACA;;;AACA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,YAAY,EAAEM,KAAK,CAACN,YADf;AAELe,MAAAA,iBAFK;AAGLE,MAAAA;AAHK,KADT;AAAA,cAOGZ;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA9CM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\nconst initialState = {\n  transactions: [],\n  error: null,\n  isLoading: true,\n};\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Create provider for other components to access state, actions, etc\nexport const GlobalProvider = ({ children }) => {\n  // Reducer takes our own reducer and an initial piece of state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  async function getTransactions() {\n    try {\n      const res = await axios.get(\"/expensetracker/transactions/\");\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: res.data.data,\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.error,\n      });\n    }\n  }\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id,\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction,\n    });\n  }\n\n  // Return the Provider so that we can access it\n  // {children} will be our components wrapped inside the Provider. In this case, everything in App.js\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}