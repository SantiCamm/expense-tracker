{"ast":null,"code":"var _jsxFileName = \"/home/santiago/React/expense-tracker/client/src/context/GlobalState.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport TransactionsReducer from \"./TransactionsReducer\";\nimport * as api from \"../api\";\nimport axios from \"axios\"; // Default state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: [],\n  error: null,\n  isLoading: true,\n  auth: {\n    error: null,\n    authData: null,\n    success: null\n  }\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Create provider for other components to access state, actions, etc\n// Children will be the components wrapped inside the GlobalProvider\n\nexport const GlobalProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // Reducer takes our own reducer and an initial piece of state\n  const [state, dispatch] = useReducer(TransactionsReducer, initialState); // ACTIONS\n  // Async since we are waiting for the api response\n\n  async function googleLogin(loginData, navigate) {\n    try {\n      const res = await api.googleLogin(loginData);\n      dispatch({\n        type: \"LOGIN\",\n        payload: loginData\n      });\n      navigate(\"/\");\n    } catch (error) {}\n  }\n\n  async function getTransactions() {\n    try {\n      // Make the api call with axios\n      const transactions = await api.fetchTransactions(); // Dispatch an action to the reducer with the fetched data\n\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: transactions.data.data\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.error\n      });\n    }\n  }\n\n  async function addTransaction(transaction) {\n    try {\n      // Config to make a POST request with axios (headers)\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }; // Axios request\n\n      const res = await api.addTransaction(transaction, config); // Dispatch an action with the response data. In this case, the recently added transaction\n\n      dispatch({\n        type: \"ADD_TRANSACTION\",\n        payload: res.data.data\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.message\n      });\n    }\n  }\n\n  async function deleteTransaction(id) {\n    try {\n      await api.deleteTransaction(id);\n      dispatch({\n        type: \"DELETE_TRANSACTION\",\n        payload: id\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.error\n      });\n    }\n  } // Return the Provider so that we can access it\n\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      error: state.error,\n      isLoading: state.isLoading,\n      auth: state.auth,\n      getTransactions,\n      deleteTransaction,\n      addTransaction,\n      googleLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/home/santiago/React/expense-tracker/client/src/context/GlobalState.jsx"],"names":["React","createContext","useReducer","TransactionsReducer","api","axios","initialState","transactions","error","isLoading","auth","authData","success","GlobalContext","GlobalProvider","children","state","dispatch","googleLogin","loginData","navigate","res","type","payload","getTransactions","fetchTransactions","data","response","addTransaction","transaction","config","headers","message","deleteTransaction","id"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport TransactionsReducer from \"./TransactionsReducer\";\nimport * as api from \"../api\";\nimport axios from \"axios\";\n\n// Default state\nconst initialState = {\n  transactions: [],\n  error: null,\n  isLoading: true,\n  auth: { error: null, authData: null, success: null },\n};\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Create provider for other components to access state, actions, etc\n// Children will be the components wrapped inside the GlobalProvider\nexport const GlobalProvider = ({ children }) => {\n  // Reducer takes our own reducer and an initial piece of state\n  const [state, dispatch] = useReducer(TransactionsReducer, initialState);\n\n  // ACTIONS\n  // Async since we are waiting for the api response\n  async function googleLogin(loginData, navigate) {\n    try {\n      const res = await api.googleLogin(loginData);\n      dispatch({\n        type: \"LOGIN\",\n        payload: loginData,\n      });\n      navigate(\"/\");\n    } catch (error) {}\n  }\n\n  async function getTransactions() {\n    try {\n      // Make the api call with axios\n      const transactions = await api.fetchTransactions();\n\n      // Dispatch an action to the reducer with the fetched data\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: transactions.data.data,\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.error,\n      });\n    }\n  }\n\n  async function addTransaction(transaction) {\n    try {\n      // Config to make a POST request with axios (headers)\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      // Axios request\n      const res = await api.addTransaction(transaction, config);\n\n      // Dispatch an action with the response data. In this case, the recently added transaction\n      dispatch({\n        type: \"ADD_TRANSACTION\",\n        payload: res.data.data,\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.message,\n      });\n    }\n  }\n\n  async function deleteTransaction(id) {\n    try {\n      await api.deleteTransaction(id);\n\n      dispatch({\n        type: \"DELETE_TRANSACTION\",\n        payload: id,\n      });\n    } catch (error) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: error.response.data.error,\n      });\n    }\n  }\n\n  // Return the Provider so that we can access it\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        error: state.error,\n        isLoading: state.isLoading,\n        auth: state.auth,\n        getTransactions,\n        deleteTransaction,\n        addTransaction,\n        googleLogin,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}