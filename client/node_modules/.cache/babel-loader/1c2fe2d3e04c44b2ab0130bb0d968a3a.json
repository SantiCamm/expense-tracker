{"ast":null,"code":"// The reducer handles state changes in response to certain actions\nconst reducer = (state, action) => {\n  switch (action.type) {\n    // Return user data\n    case \"LOGIN\":\n      localStorage.setItem(\"profile\", JSON.stringify({ ...action.payload\n      }));\n      const data = JSON.parse(localStorage.getItem(\"profile\"));\n      console.log(data.data);\n      return { ...state,\n        auth: {\n          success: true,\n          authData: action.payload\n        }\n      };\n    // Clear session\n\n    case \"LOGOUT\":\n      localStorage.clear();\n      return { ...state,\n        auth: null\n      };\n    // Return all the fetched transactions with the axios request\n\n    case \"GET_TRANSACTIONS\":\n      return { ...state,\n        isLoading: false,\n        transactions: action.payload\n      };\n    // Return a new array with the recently added transaction\n\n    case \"ADD_TRANSACTION\":\n      return { ...state,\n        transactions: [...state.transactions, action.payload],\n        error: null\n      };\n    // Filter the transactions to get a new array without the deleted transaction\n\n    case \"DELETE_TRANSACTION\":\n      return { ...state,\n        transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n      };\n    // Return the error from the server\n\n    case \"TRANSACTION_ERROR\":\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/santiago/React/expense-tracker/client/src/context/GlobalReducer.jsx"],"names":["reducer","state","action","type","localStorage","setItem","JSON","stringify","payload","data","parse","getItem","console","log","auth","success","authData","clear","isLoading","transactions","error","filter","transaction","_id"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAK,OAAL;AACEC,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAe,EAAE,GAAGL,MAAM,CAACM;AAAZ,OAAf,CAAhC;AACA,YAAMC,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,SAArB,CAAX,CAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACA,IAAjB;AACA,aAAO,EAAE,GAAGR,KAAL;AAAYa,QAAAA,IAAI,EAAE;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,QAAQ,EAAEd,MAAM,CAACM;AAAlC;AAAlB,OAAP;AAEF;;AACA,SAAK,QAAL;AACEJ,MAAAA,YAAY,CAACa,KAAb;AACA,aAAO,EAAE,GAAGhB,KAAL;AAAYa,QAAAA,IAAI,EAAE;AAAlB,OAAP;AAEF;;AACA,SAAK,kBAAL;AACE,aAAO,EACL,GAAGb,KADE;AAELiB,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,YAAY,EAAEjB,MAAM,CAACM;AAHhB,OAAP;AAMF;;AACA,SAAK,iBAAL;AACE,aAAO,EACL,GAAGP,KADE;AAELkB,QAAAA,YAAY,EAAE,CAAC,GAAGlB,KAAK,CAACkB,YAAV,EAAwBjB,MAAM,CAACM,OAA/B,CAFT;AAGLY,QAAAA,KAAK,EAAE;AAHF,OAAP;AAMF;;AACA,SAAK,oBAAL;AACE,aAAO,EACL,GAAGnB,KADE;AAELkB,QAAAA,YAAY,EAAElB,KAAK,CAACkB,YAAN,CAAmBE,MAAnB,CACXC,WAAD,IAAiBA,WAAW,CAACC,GAAZ,KAAoBrB,MAAM,CAACM,OADhC;AAFT,OAAP;AAOF;;AACA,SAAK,mBAAL;AACE,aAAO,EACL,GAAGP,KADE;AAELmB,QAAAA,KAAK,EAAElB,MAAM,CAACM;AAFT,OAAP;;AAKF;AACE,aAAOP,KAAP;AA9CJ;AAgDD,CAjDD;;AAmDA,eAAeD,OAAf","sourcesContent":["// The reducer handles state changes in response to certain actions\nconst reducer = (state, action) => {\n  switch (action.type) {\n    // Return user data\n    case \"LOGIN\":\n      localStorage.setItem(\"profile\", JSON.stringify({ ...action.payload }));\n      const data = JSON.parse(localStorage.getItem(\"profile\"));\n      console.log(data.data);\n      return { ...state, auth: { success: true, authData: action.payload } };\n    \n    // Clear session\n    case \"LOGOUT\":\n      localStorage.clear();\n      return { ...state, auth: null };\n\n    // Return all the fetched transactions with the axios request\n    case \"GET_TRANSACTIONS\":\n      return {\n        ...state,\n        isLoading: false,\n        transactions: action.payload,\n      };\n\n    // Return a new array with the recently added transaction\n    case \"ADD_TRANSACTION\":\n      return {\n        ...state,\n        transactions: [...state.transactions, action.payload],\n        error: null,\n      };\n\n    // Filter the transactions to get a new array without the deleted transaction\n    case \"DELETE_TRANSACTION\":\n      return {\n        ...state,\n        transactions: state.transactions.filter(\n          (transaction) => transaction._id !== action.payload\n        ),\n      };\n\n    // Return the error from the server\n    case \"TRANSACTION_ERROR\":\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}