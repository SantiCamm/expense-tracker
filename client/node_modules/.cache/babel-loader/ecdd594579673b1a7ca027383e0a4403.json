{"ast":null,"code":"// The reducer handles state changes in response to certain actions\nconst reducer = (state, action) => {\n  switch (action.type) {\n    // Return all the fetched transactions with the axios request\n    case \"GET_TRANSACTIONS\":\n      return { ...state,\n        isLoading: false,\n        transactions: action.payload\n      };\n    // Return a new array with the recently added transaction\n\n    case \"ADD_TRANSACTION\":\n      return { ...state,\n        transactions: [...state.transactions, action.payload],\n        error: null\n      };\n    // Filter the transactions to get a new array without the deleted transaction\n\n    case \"DELETE_TRANSACTION\":\n      return { ...state,\n        transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n      };\n    // Return the error from the server\n\n    case \"TRANSACTION_ERROR\":\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/santiago/React/expense-tracker/client/src/context/TransactionsReducer.jsx"],"names":["reducer","state","action","type","isLoading","transactions","payload","error","filter","transaction","_id"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AAEE;AACA,SAAK,kBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,YAAY,EAAEH,MAAM,CAACI;AAHhB,OAAP;AAMF;;AACA,SAAK,iBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,YAAY,EAAE,CAAC,GAAGJ,KAAK,CAACI,YAAV,EAAwBH,MAAM,CAACI,OAA/B,CAFT;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;AAMF;;AACA,SAAK,oBAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELI,QAAAA,YAAY,EAAEJ,KAAK,CAACI,YAAN,CAAmBG,MAAnB,CACXC,WAAD,IAAiBA,WAAW,CAACC,GAAZ,KAAoBR,MAAM,CAACI,OADhC;AAFT,OAAP;AAOF;;AACA,SAAK,mBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELM,QAAAA,KAAK,EAAEL,MAAM,CAACI;AAFT,OAAP;;AAMF;AACE,aAAOL,KAAP;AApCJ;AAsCD,CAvCD;;AAyCA,eAAeD,OAAf","sourcesContent":["// The reducer handles state changes in response to certain actions\nconst reducer = (state, action) => {\n  switch (action.type) {\n\n    // Return all the fetched transactions with the axios request\n    case \"GET_TRANSACTIONS\":\n      return {\n        ...state,\n        isLoading: false,\n        transactions: action.payload,\n      };\n\n    // Return a new array with the recently added transaction\n    case \"ADD_TRANSACTION\":\n      return {\n        ...state,\n        transactions: [...state.transactions, action.payload],\n        error: null,\n      };\n\n    // Filter the transactions to get a new array without the deleted transaction\n    case \"DELETE_TRANSACTION\":\n      return {\n        ...state,\n        transactions: state.transactions.filter(\n          (transaction) => transaction._id !== action.payload\n        ),\n      };\n\n    // Return the error from the server\n    case \"TRANSACTION_ERROR\":\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    \n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}